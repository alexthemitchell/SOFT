### LIST
1:2:[]
1:2:3:4:[]
1:[]

### STRING
#"\"Oh my,\" she said, \"that's easy!\""

### LET
let i = 5
let f = 3.14
let b1 = true
let ls = [true, false]
let b2 = b1
f
b2

### COMMENTS
let i = 2 # This will not be interpreted
let x = i # Neither will this
# This line does nothing

# LIST OPERATORS
let ls = [0,1,2,3]
first (ls)

let ls = ['a','b','c']
rest (ls)

let ls1 = [0,1]
let ls2 = []
let ls3 = nil
empty (ls1)
empty (ls2)
empty (ls3)

### :
let ls = [0,1]
3:ls
-1:ls:2
1:nil

### NUMBER OPERATORS
1 + 5
1.45 + 45

5-5
let one = 1
one - 5
one - 5 - -4

let pi = 3.141592653579
let r = 100
let area = pi * r * r
area

20 / 4
27 / 12

### COMPARATORS
1 < 5
1 <= 1
2 > 4
5 == 5

# FUNCTIONS
function addBiz (num) {
  num + 5
}
addBiz (10)
function multiply (num1, num2) { num1 * num2 }
multiply (7,9)

# BOOLEAN OPERATORS
let x = 3
let y = 5
let z = 3
let b1 = (x == z)
let b2 = (x == y)
let b3 = (z == 4)
let b4 = (y == 5)

# TO IMPLEMENT IN LIBRARY???
#let and1 = and (b1, b2, b3, b4)
#let and2 = and (b1, b4)

#let or1 = or (b1, b2, b3, b4)
#let or2 = or (b2, b3)

#let not1 = not (b1)
#let not2 = not (b2)

### CONDITIONALS
#function EvenOrOdd (x) {
#  if ( (x mod 2) == 0) then
#    even
#  else then
#    odd
#}

#function NegPosZero (x) {
#  if (x == 0) then
#    Zero
#  else if (x < 0) then
#    Negative
#  else then
#    Positive
#}

### explain
#explain (mult([1,2,3,4]))


